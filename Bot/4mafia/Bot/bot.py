import config  # —Å–∫—Ä–∏–ø—Ç —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –±–æ—Ç–∞
import logging  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
import keyboards  # —Å–∫—Ä–∏–ø—Ç —Å–æ –≤—Å–µ–º–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏
# import events  # —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—á–∏—Ö —Å–æ–±—ã—Ç–∏–π
# import asyncio

from aiogram import Bot, Dispatcher, executor, types  # —ç–ª–µ–º–µ–Ω—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
from sqlighter import SQLighter  # –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–¥ sql

# –∑–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ —Å–æ–±—ã–∏–π –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = SQLighter('main.db')


# –í—ã–∑—ã–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
async def manager_subscribe(message):
    await bot.send_message(message.from_user.id, '–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?',
                           reply_markup=keyboards.get_manager_subscribe_keyboard())


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def phone_number_update(message, username, phone_number):
    db.update_phone_number(username, phone_number)
    await bot.send_message(message.from_user.id, '–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–≤–æ–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏, —Å–ø–∞—Å–∏–±–æ!')


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É user, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    if not db.subscriber_exists(message.from_user.id):
        db.add_subscriber(message.from_user.id, message.from_user.username, True)

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–ª—É–±–∞ 4MAFIA.\n–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é, —á—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π!",
                         reply_markup=keyboards.get_main_keyboard())

    db.add_history_log(message.from_user.id, message.from_user.username, message.text)


# –°–æ–±–∏—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'button_subscribe')
async def process_callback_button_subscribe(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if not db.subscriber_exists(callback_query.from_user.id):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        db.add_subscriber(callback_query.from_user.id, callback_query.from_user.username, True)
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(callback_query.from_user.id, True)

    db.add_history_log(callback_query.from_user.id, callback_query.from_user.username, "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É üì¨')


# –°–æ–±–∏—Ç–∏–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø–∏—Å–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'button_unsubscribe')
async def process_callback_button_unsubscribe(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if not db.subscriber_exists(callback_query.from_user.id):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º)
        db.add_subscriber(callback_query.from_user.id, False)
        await bot.send_message(callback_query.from_user.id, '–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã üì™')
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(callback_query.from_user.id, False)
        await bot.send_message(callback_query.from_user.id, '–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ üì™')
    db.add_history_log(callback_query.from_user.id, callback_query.from_user.username, "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –∏ –∑–∞–ø–∏—Å—å –µ–≥–æ –≤ –±–∞–∑—É
@dp.message_handler(content_types=['contact'])
async def get_contact(message: types.Message):
    db.update_phone_number(message.contact["user_id"], message.contact["phone_number"])
    db.add_history_log(message.from_user.id, message.from_user.username, message.contact["phone_number"])  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    await bot.send_message(message.from_user.id, '–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–≤–æ–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏, —Å–ø–∞—Å–∏–±–æ! üòä')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def echo_message(message: types.Message):
    if message.text == 'üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        await message.answer("–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è üíº",
                             reply_markup=keyboards.get_settings_keyboard())
    elif message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await message.answer("–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üì±", reply_markup=keyboards.get_main_keyboard())
    elif message.text == 'üì´ –†–∞—Å—Å—ã–ª–∫–∞':
        await manager_subscribe(message)
    elif message.text == '‚òéÔ∏è–û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä':
        await phone_number_update(message)
    elif message.text == 'üìúÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∏–∫':
        await message.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏ —Ç–≤–æ–π –Ω–∏–∫–Ω–µ–º, –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –≤ —á–∞—Ç, –ø–æ—Å—Ç–∞–≤–∏–≤ –ø–µ—Ä–µ–¥ –Ω–∏–º "
                             "—Å–∏–º–≤–æ–ª *, –≤–æ—Ç —Ç–∞–∫:\n*Raptor")
    elif message.text[0] == '*':  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–∏–∫–Ω–µ–π–º–∞ –≤ –±–∞–∑—É
        if len(message.text) == 1:
            await bot.send_message(message.from_user.id, '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏ —Ç–≤–æ–π –Ω–∏–∫–Ω–µ–π–º, –Ω—É–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –µ–≥–æ '
                                                         '–ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ *!')
        else:
            db.update_nickname(message.from_user.id, message.text[1:len(message.text)])
            await bot.send_message(message.from_user.id, '–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–≤–æ–π –Ω–∏–∫–Ω–µ–π–º!')
    else:  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
        await bot.send_message(message.from_user.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å...\n–õ—É—á—à–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é')

    db.add_history_log(message.from_user.id, message.from_user.username, message.text)  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ


# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–Ω–≥ –ø–æ–ª–ª–∏–Ω–≥
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
